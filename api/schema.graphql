"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  image: ImageFieldOutput
  recipies(
    where: RecipieWhereInput! = {}
    search: String
    sortBy: [SortRecipiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RecipieOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Recipie!]
  _recipiesMeta(
    where: RecipieWhereInput! = {}
    search: String
    sortBy: [SortRecipiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RecipieOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use recipiesCount instead."
    )
  recipiesCount(where: RecipieWhereInput! = {}): Int
  following(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _followingMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use followingCount instead."
    )
  followingCount(where: UserWhereInput! = {}): Int
  followers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _followersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use followersCount instead."
    )
  followersCount(where: UserWhereInput! = {}): Int
  likes(
    where: RecipieWhereInput! = {}
    search: String
    sortBy: [SortRecipiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RecipieOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Recipie!]
  _likesMeta(
    where: RecipieWhereInput! = {}
    search: String
    sortBy: [SortRecipiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RecipieOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use likesCount instead."
    )
  likesCount(where: RecipieWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  recipies_every: RecipieWhereInput

  """
   condition must be true for at least 1 node
  """
  recipies_some: RecipieWhereInput

  """
   condition must be false for all nodes
  """
  recipies_none: RecipieWhereInput

  """
   condition must be true for all nodes
  """
  following_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  following_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  following_none: UserWhereInput

  """
   condition must be true for all nodes
  """
  followers_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  followers_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  followers_none: UserWhereInput

  """
   condition must be true for all nodes
  """
  likes_every: RecipieWhereInput

  """
   condition must be true for at least 1 node
  """
  likes_some: RecipieWhereInput

  """
   condition must be false for all nodes
  """
  likes_none: RecipieWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  image: ImageFieldInput
  recipies: RecipieRelateToManyInput
  following: UserRelateToManyInput
  followers: UserRelateToManyInput
  likes: RecipieRelateToManyInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input RecipieRelateToManyInput {
  create: [RecipieCreateInput]
  connect: [RecipieWhereUniqueInput]
  disconnect: [RecipieWhereUniqueInput]
  disconnectAll: Boolean
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  image: ImageFieldInput
  recipies: RecipieRelateToManyInput
  following: UserRelateToManyInput
  followers: UserRelateToManyInput
  likes: RecipieRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type Recipie {
  id: ID!
  name: String
  category: String
  description: String
  author: User
  image: ImageFieldOutput
  steps(
    where: StepWhereInput! = {}
    search: String
    sortBy: [SortStepsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [StepOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Step!]
  _stepsMeta(
    where: StepWhereInput! = {}
    search: String
    sortBy: [SortStepsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [StepOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use stepsCount instead."
    )
  stepsCount(where: StepWhereInput! = {}): Int
  time: String
  ingredients(
    where: IngredientWhereInput! = {}
    search: String
    sortBy: [SortIngredientsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [IngredientOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Ingredient!]
  _ingredientsMeta(
    where: IngredientWhereInput! = {}
    search: String
    sortBy: [SortIngredientsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [IngredientOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use ingredientsCount instead."
    )
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  likes(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _likesMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use likesCount instead."
    )
  likesCount(where: UserWhereInput! = {}): Int
}

input RecipieWhereInput {
  AND: [RecipieWhereInput!]
  OR: [RecipieWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  category: String
  category_not: String
  category_in: [String]
  category_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean

  """
   condition must be true for all nodes
  """
  steps_every: StepWhereInput

  """
   condition must be true for at least 1 node
  """
  steps_some: StepWhereInput

  """
   condition must be false for all nodes
  """
  steps_none: StepWhereInput
  time: String
  time_not: String
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String

  """
   condition must be true for all nodes
  """
  ingredients_every: IngredientWhereInput

  """
   condition must be true for at least 1 node
  """
  ingredients_some: IngredientWhereInput

  """
   condition must be false for all nodes
  """
  ingredients_none: IngredientWhereInput

  """
   condition must be true for all nodes
  """
  likes_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  likes_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  likes_none: UserWhereInput
}

input RecipieWhereUniqueInput {
  id: ID
}

enum SortRecipiesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
  description_ASC
  description_DESC
  time_ASC
  time_DESC
}

input RecipieOrderByInput {
  id: OrderDirection
  name: OrderDirection
  category: OrderDirection
  description: OrderDirection
  time: OrderDirection
}

input RecipieUpdateInput {
  name: String
  category: String
  description: String
  author: UserRelateToOneInput
  image: ImageFieldInput
  steps: StepRelateToManyInput
  time: String
  ingredients: IngredientRelateToManyInput
  likes: UserRelateToManyInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input StepRelateToManyInput {
  create: [StepCreateInput]
  connect: [StepWhereUniqueInput]
  disconnect: [StepWhereUniqueInput]
  disconnectAll: Boolean
}

input IngredientRelateToManyInput {
  create: [IngredientCreateInput]
  connect: [IngredientWhereUniqueInput]
  disconnect: [IngredientWhereUniqueInput]
  disconnectAll: Boolean
}

input RecipiesUpdateInput {
  id: ID!
  data: RecipieUpdateInput
}

input RecipieCreateInput {
  name: String
  category: String
  description: String
  author: UserRelateToOneInput
  image: ImageFieldInput
  steps: StepRelateToManyInput
  time: String
  ingredients: IngredientRelateToManyInput
  likes: UserRelateToManyInput
}

input RecipiesCreateInput {
  data: RecipieCreateInput
}

"""
 A keystone list
"""
type Step {
  id: ID!
  name: String
  image: ImageFieldOutput
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input StepWhereInput {
  AND: [StepWhereInput!]
  OR: [StepWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
}

input StepWhereUniqueInput {
  id: ID
}

enum SortStepsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input StepOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StepUpdateInput {
  name: String
  image: ImageFieldInput
}

input StepsUpdateInput {
  id: ID!
  data: StepUpdateInput
}

input StepCreateInput {
  name: String
  image: ImageFieldInput
}

input StepsCreateInput {
  data: StepCreateInput
}

"""
 A keystone list
"""
type Ingredient {
  id: ID!
  name: String
  quantity: Float
}

input IngredientWhereInput {
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  quantity: Float
  quantity_not: Float
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  quantity_in: [Float]
  quantity_not_in: [Float]
}

input IngredientWhereUniqueInput {
  id: ID
}

enum SortIngredientsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
}

input IngredientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  quantity: OrderDirection
}

input IngredientUpdateInput {
  name: String
  quantity: Float
}

input IngredientsUpdateInput {
  id: ID!
  data: IngredientUpdateInput
}

input IngredientCreateInput {
  name: String
  quantity: Float
}

input IngredientsCreateInput {
  data: IngredientCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Recipie item.
  """
  createRecipie(data: RecipieCreateInput): Recipie

  """
   Create multiple Recipie items.
  """
  createRecipies(data: [RecipiesCreateInput]): [Recipie]

  """
   Update a single Recipie item by ID.
  """
  updateRecipie(id: ID!, data: RecipieUpdateInput): Recipie

  """
   Update multiple Recipie items by ID.
  """
  updateRecipies(data: [RecipiesUpdateInput]): [Recipie]

  """
   Delete a single Recipie item by ID.
  """
  deleteRecipie(id: ID!): Recipie

  """
   Delete multiple Recipie items by ID.
  """
  deleteRecipies(ids: [ID!]): [Recipie]

  """
   Create a single Step item.
  """
  createStep(data: StepCreateInput): Step

  """
   Create multiple Step items.
  """
  createSteps(data: [StepsCreateInput]): [Step]

  """
   Update a single Step item by ID.
  """
  updateStep(id: ID!, data: StepUpdateInput): Step

  """
   Update multiple Step items by ID.
  """
  updateSteps(data: [StepsUpdateInput]): [Step]

  """
   Delete a single Step item by ID.
  """
  deleteStep(id: ID!): Step

  """
   Delete multiple Step items by ID.
  """
  deleteSteps(ids: [ID!]): [Step]

  """
   Create a single Ingredient item.
  """
  createIngredient(data: IngredientCreateInput): Ingredient

  """
   Create multiple Ingredient items.
  """
  createIngredients(data: [IngredientsCreateInput]): [Ingredient]

  """
   Update a single Ingredient item by ID.
  """
  updateIngredient(id: ID!, data: IngredientUpdateInput): Ingredient

  """
   Update multiple Ingredient items by ID.
  """
  updateIngredients(data: [IngredientsUpdateInput]): [Ingredient]

  """
   Delete a single Ingredient item by ID.
  """
  deleteIngredient(id: ID!): Ingredient

  """
   Delete multiple Ingredient items by ID.
  """
  deleteIngredients(ids: [ID!]): [Ingredient]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Recipie items which match the where clause.
  """
  allRecipies(
    where: RecipieWhereInput! = {}
    search: String
    sortBy: [SortRecipiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RecipieOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Recipie!]

  """
   Search for the Recipie item with the matching ID.
  """
  Recipie(where: RecipieWhereUniqueInput!): Recipie

  """
   Perform a meta-query on all Recipie items which match the where clause.
  """
  _allRecipiesMeta(
    where: RecipieWhereInput! = {}
    search: String
    sortBy: [SortRecipiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RecipieOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use recipiesCount instead."
    )
  recipiesCount(where: RecipieWhereInput! = {}): Int

  """
   Search for all Step items which match the where clause.
  """
  allSteps(
    where: StepWhereInput! = {}
    search: String
    sortBy: [SortStepsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [StepOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Step!]

  """
   Search for the Step item with the matching ID.
  """
  Step(where: StepWhereUniqueInput!): Step

  """
   Perform a meta-query on all Step items which match the where clause.
  """
  _allStepsMeta(
    where: StepWhereInput! = {}
    search: String
    sortBy: [SortStepsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [StepOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use stepsCount instead."
    )
  stepsCount(where: StepWhereInput! = {}): Int

  """
   Search for all Ingredient items which match the where clause.
  """
  allIngredients(
    where: IngredientWhereInput! = {}
    search: String
    sortBy: [SortIngredientsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [IngredientOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Ingredient!]

  """
   Search for the Ingredient item with the matching ID.
  """
  Ingredient(where: IngredientWhereUniqueInput!): Ingredient

  """
   Perform a meta-query on all Ingredient items which match the where clause.
  """
  _allIngredientsMeta(
    where: IngredientWhereInput! = {}
    search: String
    sortBy: [SortIngredientsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [IngredientOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use ingredientsCount instead."
    )
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
